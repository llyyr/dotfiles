alias wdesktop="cd /mnt/c/Users/llyyr/Desktop/"
alias brplay="cd ~/.local/share/Steam/steamapps/compatdata/291550/pfx/drive_c/users/steamuser/BrawlhallaReplays"
alias aoc="cd ~/projects/aoc/aoc-2022"
alias vim="$EDITOR"
alias lsd="lsd -AF --date=relative --icon=never --group-directories-first"
alias ls="lsd"
alias lt="ls --tree"
# alias ls="ls -AhF --color=auto --group-directories-first"
alias browse='fzf --bind="enter:execute(echo -n {} | wl-copy)" --preview="pygmentize {} 2>/dev/null || cat {}" --preview-window=up'
alias grep="grep --color=auto --binary-files=without-match --devices=skip"
alias psg="ps aux | grep -v grep | grep -i -e VSZ -e"
alias mpa="mpv --profile=audio"
alias cp="cp -ipv"
alias mv="mv -iv"
# alias rm="rm -Iv"
alias mkdir="mkdir -pv"
alias du="du -ach | sort -h"
alias diff="diff -Naup --color=auto"
alias traffic="sudo ss -tp4"
alias rg="rg --smart-case"
alias dotfiles="/usr/bin/git --git-dir=$HOME/dotfiles --work-tree=$HOME"
alias localejp="LC_ALL=ja_JP.UTF-8 LANG=ja_JP.UTF-8"
alias cpug="sudo cpupower frequency-set -g $1"
alias makevenv="python3.11 -m venv venv"
alias runvenv="source venv/bin/activate"
alias ghc="ghc -no-keep-hi-files -no-keep-o-files $1"
alias gbf2="microsoft-edge-beta --profile-directory='Profile 2' --ozone-platform-hint=auto --disable-backgrounding-occluded-windows"
alias pypy="/opt/pypy/bin/pypy"
alias rsync='rsync --info=progress2 --sparse --progress --human-readable'

colpick() {
    grim -g "$(slurp -p)" -t ppm - | convert - -format '%[pixel:p{0,0}]' txt:-
}

waylandrc() {
    #wf-recorder -g "$(slurp)" -c h264_vaapi -d /dev/dri/renderD128 --force-yuv -f ~/Videos/$(date +'%Y%m%d-%H%M').mp4
    wf-recorder -g "$(slurp)" --audio -f ~/Videos/$(date +'%Y%m%d-%H%M').mp4
}

gbfrc() {
    wf-recorder -g "1046,144 320x581" -f ~/Videos/$(date +'%Y%m%d-%H%M').mp4
}

upload-0x0() {
    if [ $# -eq 0 ]; then
        curl -s -F file=@- https://0x0.st
    else
        curl -s -F file=@"$1" https://0x0.st
    fi
}

upload-yukari() {
    if [ $# -eq 0 ]; then
        curl -X POST -u "llyyr:$YUKARI_PASS" -s -F file=@- https://host.yukari.in/upload
    else
        curl -X POST -u "llyyr:$YUKARI_PASS" -s -F file=@"$1" https://host.yukari.in/upload
    fi
}

mkcd() {
    test -d "$1" || mkdir "$1" && cd "$1"
}

wttr() {
    if [ -z $1 ]; then
        curl -s "v2.wttr.in/Jamal+Patna"
    else
        curl -s "v2.wttr.in/$1"
    fi
}

cheat() {
    if [ -z $1 ]; then
        curl -s "cheat.sh"
    else
        curl -s "cheat.sh/$1"
    fi
}

# fuzzy find (case insensitive)
function ff() {
	local pattern="$1"
	shift
	if [ $# -eq 0 ]; then
		set -- .
	fi
	find "$@" | grep -i -- "$pattern"
}

function man() {
	LESS_TERMCAP_md=$'\e[1;36m' \
	LESS_TERMCAP_me=$'\e[0m' \
	LESS_TERMCAP_us=$'\e[1;32m' \
	LESS_TERMCAP_ue=$'\e[0m' \
	GROFF_NO_SGR=1 \
	command man "$@"
}

n ()
{
    # Block nesting of nnn in subshells
    if [[ "${NNNLVL:-0}" -ge 1 ]]; then
        echo "nnn is already running"
        return
    fi
    # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
    # If NNN_TMPFILE is set to a custom path, it must be exported for nnn to
    # see. To cd on quit only on ^G, remove the "export" and make sure not to
    # use a custom path, i.e. set NNN_TMPFILE *exactly* as follows:
    # NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    NNN_TMPFILE="${XDG_CACHE_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef
    export NNN_PLUG='d:dragdrop'

    # The backslash allows one to alias n to nnn if desired without making an
    # infinitely recursive alias
    \nnn "$@"

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
}

function rm() {
  for v in "$@"; do
    [ -d "$v" ] && ls "$v"
  done
  command rm -Iv "$@"
}

fkill() {
  local pid
  if [ "$UID" != "0" ]; then
    pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
  else
    pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
  fi

  if [ "x$pid" != "x" ]; then
    echo "$pid" | xargs kill "-${1:-9}"
  fi
}

function refenv {
    export $(tmux show-environment | grep "^SSH_AUTH_SOCK")
    export $(tmux show-environment | grep "^SWAYSOCK")
    export $(tmux show-environment | grep "^DISPLAY")
}

function genshin_wish {
    strings "/home/llyyr/.local/share/anime-game-launcher/game/drive_c/Program Files/Genshin Impact/GenshinImpact_Data/webCaches/2.15.0.0/Cache/Cache_Data/data_2" | rg -o "https://.*/e20190909gacha-v2/.*" | tail -n 1
    }

function gli {
    _gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1 | xargs git rev-parse"
    _viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always %'"
    _viewGitLogLineUnfancy="$_gitLogLineToHash | xargs -I % sh -c 'git show %'"

    git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@" |
        fzf --no-sort --reverse --tiebreak=index --no-multi \
            --ansi --preview="$_viewGitLogLine" \
                --header "enter to view, ctrl-y to copy hash, ctrl-v to open in nvim" \
                --bind "enter:execute:$_viewGitLogLine   | less -R" \
                --bind "ctrl-v:execute:$_viewGitLogLineUnfancy | nvim -" \
                --bind "ctrl-y:execute:$_gitLogLineToHash | wl-copy"
}

function ythttp {
     yt-dlp -f bestvideo*+bestaudio/best "$1" -o - | mpv --no-ytdl -
}

function cplast {
    fc -ln -1 | wl-copy
}
